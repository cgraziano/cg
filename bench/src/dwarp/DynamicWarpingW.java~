/****************************************************************************
Copyright (c) 2012, Colorado School of Mines and others. All rights reserved.
This program and accompanying materials are made available under the terms of
the Common Public License - v1.0, which accompanies this distribution, and is
available at http://www.eclipse.org/legal/cpl-v10.html
****************************************************************************/
package dwarp;

import edu.mines.jtk.dsp.*;
import edu.mines.jtk.interp.*;
import edu.mines.jtk.util.*;
import edu.mines.jtk.mosaic.*;
import edu.mines.jtk.lapack.*;
import edu.mines.jtk.util.Check;
import static edu.mines.jtk.dsp.Conv.*;       
import static edu.mines.jtk.util.ArrayMath.*;


public class DynamicWarpingW {

  public DynamicWarpingW() {
    SincInterp si = new SincInterp();
    _si = si;
  }

  /**
   * Sets the min-max range of times used to estimate wavelet.
   * @param itmin minimum time, in samples.
   * @param itmax maximum time, in samples.
   */
  public void setTimeRange(int itmin, int itmax) {
    _itmin = itmin;
    _itmax = itmax;
  }

  /**
   * Sets the stability factor by which to scale zero-lag of correlations.
   * A factor slightly greater than one may stabilize estimates of
   * inverse wavelets A.
   * @param sfac stability factor.
   */
  public void setStabilityFactor(double sfac) {
    _sfac = sfac;
  }

  /**
   * Sets the min-max range of frequencies in wavelet.
   * @param fmin minimum frequency, in cycles/sample.
   * @param fmax maximum frequency, in cycles/sample.
   */
  public void setFrequencyRange(double fmin, double fmax) {
    _bpf = new BandPassFilter(fmin,fmax,0.05,0.01);
  }

  /**
   * Estimates the wavelet h from the inverse wavelet a.
   * @param na number of samples in the inverse wavelet a.
   * @param ka the sample index for a[0].
   * @param a array of coefficients for the inverse wavelet a.
   * @param nh number of samples in the wavelet h.
   * @param kh the sample index for h[0].
   */
  public float[] getWaveletH(int na, int ka, float[] a, int nh, int kh) {
    float[] one = {1.0f};
    float[] ca1 = new float[nh];
    float[] caa = new float[nh];
    xcor(na,ka,a,1,0,one,nh,kh,ca1);
    xcor(na,ka,a,na,ka,a,nh, 0,caa);
    caa[0] *= _sfac;
    SymmetricToeplitzFMatrix stm = new SymmetricToeplitzFMatrix(caa);
    return stm.solve(ca1);
  }
  
  public float[] getInverseAWarp(
      int na, int ka,
      Sampling stf, Sampling stg, Sampling sx, 
      float[][] shifts, float[][] f, float[][] g) 
  {
    Check.argument(-na<ka,"-na<ka");
    Check.argument(ka<=0,"ka<=0");
    int nt = f[0].length;
    int nx = f.length;
    double dt = stf.getDelta();

    float[][][] d = computeDifferences(na,ka,_bpf,stf,stg,sx,shifts,f,g);

    // The matrix C and right-hand-side vector b, for Ca = b. 
    // For zero lag, we have a0 = a[-ka] = 1, so that 
    // only na-1 coefficients of a are unknown;
    // the unknown coefficients are those corresponding to non-zero lags.
    int ma = na-1;
    DMatrix c = new DMatrix(ma,ma);
    DMatrix b = new DMatrix(ma,1);
    for (int ia=0,ic=0; ia<na; ++ia) {
      if (ia==-ka) continue; // skip lag zero, because a0 = 1
      for (int ja=0,jc=0; ja<na; ++ja) {
        if (ja==-ka) continue; // skip lag zero, because a0 = 1
        double cij = dot(d[ia],d[ja]);
        c.set(ic,jc,cij);
        ++jc;
      }
      c.set(ic,ic,c.get(ic,ic)*_sfac);
      double bi = -dot(d[ia],d[-ka]);
      b.set(ic,0,bi);
      ++ic;
    }
    //System.out.println("c=\n"+c);
    //System.out.println("b=\n"+b);

    // Solve for inverse filter a using Cholesky decomposition of C.
    DMatrixChd chd = new DMatrixChd(c);
    DMatrix a = chd.solve(b);
    float[] aa = new float[na];
    for (int ia=0,ic=0; ia<na; ++ia) {
      if (ia==-ka) {
        aa[ia] = 1.0f; // lag 0, so a0 = 1
      } else {
        aa[ia] = (float)a.get(ic,0);
        ++ic;
      }
    }
    return aa;
  }




  /**
   * For each lag of the inverse wavelet, computes differences between
   * NMO-corrected gathers and the stacked-and-replicated versions of those
   * gathers.
   */
  public float[][][] computeDifferences(
    int na, int ka, BandPassFilter bpf,
    Sampling stf, Sampling stg, Sampling sx, 
    float[][] shifts, float[][] f, float[][] g)
  {
    int nt = f[0].length;
    int nx = f.length;
    float[][][] d = new float[na][nx][nt];
    for (int ia=0,lag=ka; ia<na; ++ia,++lag) {
      float[][] df = delay(lag,f);
      float[][] dg = delay(lag,g);
      float[][] sdg = applyShifts(stg,dg,shifts);
      if (bpf!=null) {
        for (int ix=0; ix<nx; ++ix) {
          bpf.apply(df[ix],df[ix]);
          bpf.apply(sdg[ix],sdg[ix]);
        }
      }
      for (int ix=0; ix<nx; ++ix) {
        for (int it=0; it<nt; ++it) {
          d[ia][ix][it] = sdg[ix][it]-df[ix][it];
        }
      }
    }
    return d;
  }

  /**
   * Returns differences between NMO-corrected gathers and stacks.
   * @param na number of samples in the inverse wavelet a.
   * @param ka the sample index for a[0].
   * @param st time sampling.
   * @param sx offset sampling.
   * @param vnmo array[nt] of NMO velocities.
   * @param f array[nx][nt] with input CMP gather.
   * @return array[na][nx][nt] of difference gathers.
   */
  public float[][][] getDifferenceGathers(
    int na, int ka, 
    Sampling st, Sampling sx, float[] vnmo, float[][] f) 
  {
    float[][][] d = computeDifferences(na,ka,_bpf,stf,stg,sx,vnmo,f);
    for (int ia=0,lag=ka; ia<na; ++ia,++lag)
      d[ia] = delay(-lag,d[ia]);
    //for (int ia=1; ia<na; ++ia)
    //  d[ia] = sub(d[ia],d[0]);
    return d;
  }

  /**
   * Returns uniformly sampled warped sequence h(x1) = g(x1+u(x1)).
   * @param sg sampling of the sequence g to be warped.(PS Image)
   * @param g array for the sequence g to be warped.
   * @param u array of shifts.
   * @return array for the warped sequence h.
   */
  public float[] applyShifts(Sampling sg, float[] g, float[] u) {
    Sampling s1 = sg;
    int ng = sg.getCount();
    int n1 = s1.getCount();
    float[] h = new float[n1];
    for (int i1=0; i1<n1; ++i1) {
      double x1 = s1.getValue(i1)+u[i1];
      h[i1] = _si.interpolate(sg,g,x1);
    }
    return h;
  }

  /**
   * Returns uniformly sampled warped image h(x1,x2) = g(x1+u(x1,x2),x2).
   * @param sg sampling of the sequence g to be warped.
   * @param g array for the sequence g to be warped.
   * @param u array of shifts.
   * @return array for the warped sequence h.
   */
  public float[][] applyShifts(Sampling sg, float[][] g, float[][] u) {
    int n2 = g.length;
    float[][] h = new float[n2][];
    for (int i2=0; i2<n2; ++i2)
      h[i2] = applyShifts(sg,g[i2],u[i2]);
    return h;
  }

  /**
   * Returns uniformly sampled warped image h(x1,x2,x3) = g(x1+u(x1,x2,x3),x2,x3).
   * @param sg sampling of the sequence g to be warped.
   * @param g array for the sequence g to be warped.
   * @param u array of shifts.
   * @return array for the warped sequence h.
   */
  public float[][][] applyShifts(Sampling sg, 
      float[][][] g, float[][][] u) {
    int n3 = g.length;
    int n2 = g[0].length;
    float[][][] h = new float[n3][n2][];

    for (int i3=0; i3<n3; ++i3)
      for (int i2=0; i2<n2; ++i2)
        h[i3][i2] = applyShifts(sg,g[i3][i2],u[i3][i2]);
    return h;
  }

  public float getVariancePef(
    int na, int ka, float[] a, float[][] g) 
  {
    float[][] ga = applyFilter(na,ka,a,g);
    return pow(rms(ga),2.0f);
  }

  public float getVarianceDww(
    int na, int ka, float[] a, 
    Sampling stf, Sampling stg, Sampling sx, 
    float[][] shifts, float[][] f, float[][] g) 
  {
    float[][] bda = applyBSA(na,ka,a,stf,stg,sx,shifts,f,g);
    return pow(rms(bda),2.0f);
  }

  /*public float getNormalizedVarianceDww(
    int na, int ka, float[] a, 
    Sampling st, Sampling sx, float[] vnmo, float[][] f) 
  {
    float[][] g = applyBNmoA(na,ka,a,st,sx,vnmo,f);
    float[][] r = _nmo.stackAndReplicate(g);
    return pow(rms(sub(g,r))/rms(g),2.0f);
  }
  */

 public float[][] applyHSA(
    int na, int ka, float[] a,
    int nh, int kh, float[] h,
    Sampling stpp, Sampling stps, Sampling sx, 
    float[][] shifts, float[][] f, float[][] g) 
  {
    int nt = f[0].length;
    int nx = f.length;
    float[][] ga = applyFilter(na,ka,a,g);
    float[][] sga = applyShifts(stps,g,shifts);
    return applyFilter(nh,kh,h,sga);
  } 

  public float[][] applyBSA(
    int na, int ka, float[] a, 
    Sampling stf, Sampling stg, Sampling sx, 
    float[][] shifts, float[][] f, float[][] g) 
  {
    int nx = sx.getCount();
    float[][] warp = applyShifts(stg,g,shifts);
    float[][] d = sub(warp,f);
    float[][] da = applyFilter(na,ka,a,d);
    float[][] bda = da;
    if (_bpf!=null) {
      for (int ix=0; ix<nx; ++ix)
        _bpf.apply(da[ix],bda[ix]);
    }
    return bda;
  }

  /**
   * Returns inverse wavelet a estimated via PEF of gather.
   * @param na number of samples in the inverse wavelet a.
   * @param ka the sample index for a[0].
   * @param f array[nx][nt] for CMP gather.
   * @return array of coefficients for the inverse wavelet a.
   */
  public float[] getInverseAPef(int na, int ka, float[][] f) {
    int nt = f[0].length;
    int nx = f.length;

    // CMP gather for different time shifts (band-pass filtered?).
    float[][][] d = new float[na][nx][nt];
    for (int ia=0; ia<na; ++ia) {
      d[ia] = delay(ka+ia,f);
      /* band-pass filter causes unstable estimates of wavelet
      if (_bpf!=null) {
        for (int ix=0; ix<nx; ++ix)
          _bpf.apply(d[ia][ix],d[ia][ix]);
      }
      */
    }

    // The matrix C and right-hand-side vector b, for Ca = b. 
    // For zero lag, we have a0 = a[-ka] = 1, so that 
    // only na-1 coefficients of a are unknown;
    // the unknown coefficients are those corresponding to non-zero lags.
    int ma = na-1;
    DMatrix c = new DMatrix(ma,ma);
    DMatrix b = new DMatrix(ma,1);
    for (int ia=0,ic=0; ia<na; ++ia) {
      if (ia==-ka) continue; // skip lag zero, because a0 = 1
      for (int ja=0,jc=0; ja<na; ++ja) {
        if (ja==-ka) continue; // skip lag zero, because a0 = 1
        double cij = dot(d[ia],d[ja]);
        c.set(ic,jc,cij);
        ++jc;
      }
      c.set(ic,ic,c.get(ic,ic)*_sfac);
      double bi = -dot(d[ia],d[-ka]);
      b.set(ic,0,bi);
      ++ic;
    }
    System.out.println("c=\n"+c);
    System.out.println("b=\n"+b);

    // Solve for inverse filter a using Cholesky decomposition of C.
    DMatrixChd chd = new DMatrixChd(c);
    DMatrix a = chd.solve(b);
    float[] aa = new float[na];
    for (int ia=0,ic=0; ia<na; ++ia) {
      if (ia==-ka) {
        aa[ia] = 1.0f; // lag 0, so a0 = 1
      } else {
        aa[ia] = (float)a.get(ic,0);
        ++ic;
      }
    }
    return aa;
  }

  /**
   * Computes the rms statistic for a specified vertical range in 
   * the gather.
   * @param st time sampling of the gather
   * @param sx space sampling of the gather
   * @param t1 time to begin rms computation (inclusive)
   * @param t2 time to end rms computation (exclusive)
   */
  public float rms(Sampling st, Sampling sx, 
      float t1, float t2, float[][] f) {
    int nt = st.getCount();
    int nx = sx.getCount();
    int it1 = st.indexOfNearest((double)(t1));
    int it2 = st.indexOfNearest((double)(t2));
    float sum = 0.0f;
    float ftx = 0.0f;
    int n = nx*(it2-it1+1);
    for (int ix=0; ix<nx; ++ix)
      for (int it=it1; it<=it2; ++it) {
        ftx = f[ix][it];
        sum += ftx*ftx;
      }
    float ms = sum/n;//ms is mean square
    return sqrt(ms);
  }

  /**
   * rms of the entire gather
   */
  private float rms(float[][] f) {
    int nt = f[0].length;
    int nx = f.length;
    return (float)(sqrt(dot(f,f)/nx/nt));
  }

  /**
   * Computes the mean for a specified vertical range in 
   * the gather.
   * @param st time sampling of the gather
   * @param sx space sampling of the gather
   * @param t1 time to begin rms computation (inclusive)
   * @param t2 time to end rms computation (exclusive)
   */
  public float mean(Sampling st, Sampling sx, 
      float t1, float t2, float[][] f) {
    int nt = st.getCount();
    int nx = sx.getCount();
    int it1 = st.indexOfNearest((double)(t1));
    int it2 = st.indexOfNearest((double)(t2));
    float sum = 0.0f;
    float ftx = 0.0f;
    int n = nx*(it2-it1+1);
    for (int ix=0; ix<nx; ++ix)
      for (int it=it1; it<=it2; ++it) {
        sum += abs(f[ix][it]);
      }
    return sum/n;
  }


  ///////////////////////////////////////////////////////////////
  //private
  private SincInterp _si;
  private double _sfac = 1.0;
  private int _itmin, _itmax;
  private BandPassFilter _bpf;
  

  /**
   * For testing only
   */
  private static void plotGather(Sampling st,Sampling sx, float[][] p,
      float tmin, float tmax,float perc, String title) {
    SimplePlot sp = new SimplePlot(SimplePlot.Origin.UPPER_LEFT);
    sp.setHLabel("Offset (km)");
    sp.setVLabel("Time (s)");
    sp.setSize(400,750);
    sp.setVLimits(tmin,tmax);
    sp.addColorBar();
    PixelsView pv = sp.addPixels(st,sx,p);
    sp.addTitle(title);
    pv.setPercentiles(100-perc,perc);
  }

  /**
   * Delays the CMP gather f by specified lag (which may be negative).
   */
  private static float[][] delay(int lag, float[][] f) {
    int nt = f[0].length;
    int nx = f.length;
    int itlo = max(0,lag);   // 0 <= it-lag
    int ithi = min(nt,nt+lag); // it-lag < nt
    float[][] g = new float[nx][nt];
    for (int ix=0; ix<nx; ++ix) {
      for (int it=0; it<itlo; ++it)
        g[ix][it] = 0.0f;
      for (int it=itlo; it<ithi; ++it)
        g[ix][it] = f[ix][it-lag];
      for (int it=ithi; it<nt; ++it)
        g[ix][it] = 0.0f;
    }
    return g;
  }
  
  private double dot(float[][] f, float[][] g) {
    int nt = f[0].length;
    int nx = f.length;
    double sum = 0.0;
    for (int ix=0; ix<nx; ++ix) 
      for (int it=_itmin; it<=_itmax; ++it) 
        sum += f[ix][it]*g[ix][it];
    return sum;
  }

  public static float[][] applyFilter(
    int nh, int kh, float[] h, float[][] f)
  {
    int nt = f[0].length;
    int nx = f.length;
    float[][] g = new float[nx][nt];
    applyFilter(nh,kh,h,f,g);
    return g;
  }

  private static void applyFilter(
    int nh, int kh, float[] h, float[][] f,  float[][] g)
  {
    int nt = f[0].length;
    int nx = f.length;
    for (int ix=0; ix<nx; ++ix)
      conv(nh,kh,h,nt,0,f[ix],nt,0,g[ix]);
    preserveLeadingZeros(f,g);
  }

  private static void preserveLeadingZeros(float[][] f, float[][] g) {
    int nx = f.length;
    for (int ix=0; ix<nx; ++ix)
      preserveLeadingZeros(f[ix],g[ix]);
  }

  private static void preserveLeadingZeros(float[] f, float[] g) {
    int nt = f.length;
    int nz = countLeadingZeros(f);
    for (int it=0; it<nz; ++it)
      g[it] = 0.0f;
  }

  private static int countLeadingZeros(float[] f) {
    int n = f.length;
    int nz = 0;
    for (int i=0; i<n && f[i]==0.0f; ++i)
      ++nz;
    return nz;
  }


  

}
