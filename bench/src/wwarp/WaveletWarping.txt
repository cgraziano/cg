/****************************************************************************
Copyright (c) 2012, Colorado School of Mines and others. All rights reserved.
This program and accompanying materials are made available under the terms of
the Common Public License - v1.0, which accompanies this distribution, and is
available at http://www.eclipse.org/legal/cpl-v10.html
****************************************************************************/
package wwarp;

import edu.mines.jtk.dsp.*;
import edu.mines.jtk.interp.*;
import edu.mines.jtk.util.*;
import edu.mines.jtk.mosaic.*;
import edu.mines.jtk.lapack.*;
import edu.mines.jtk.util.Check;
import static edu.mines.jtk.dsp.Conv.*;
import static edu.mines.jtk.util.ArrayMath.*;

public class WaveletWarping{
  /**
   * Constructs a WaveletWarping for a specified warping.
   * @param warp the specified warping
   */
  public WaveletWarping(Warp warp) {
    SincInterp si = new SincInterp();
    _si = si;
    _warp = warp;
  }

  /**
   * Sets the min-max range of times used to estimate wavelet.
   * @param itmin minimum time, in samples.
   * @param itmax maximum time, in samples.
   */
  public void setTimeRange(int itmin, int itmax) {
    _itmin = itmin;
    _itmax = itmax;
  }

  /**
   * Sets the min-max range of frequencies in wavelet.
   * @param fmin minimum frequency, in cycles/sample.
   * @param fmax maximum frequency, in cycles/sample.
   */
  public void setFrequencyRange(double fmin, double fmax) {
    if (fmin<fmax && (0.0<fmin || fmax<0.5)) {
      _bpf = new BandPassFilter(fmin,fmax,0.05,0.01);
    } else {
      _bpf = null;
    }
  }

  /**
   * Sets the stability factor by which to scale zero-lag of correlations.
   * A factor slightly greater than one may stabilize estimates of
   * inverse wavelets A.
   * @param sfac stability factor.
   */
  public void setStabilityFactor(double sfac) {
    _sfac = sfac;
  }

  /**
   * Returns inverse wavelet a estimated by warping one sequence to 
   * another.
   * The sequences are related by warping such that f[t] ~ g[u[t]].
   * @param na number of samples in the inverse wavelet a.
   * @param ka the sample index for a[0].
   * @param u array of samples for warping u[t].
   * @param f array of samples for sequence f[t].
   * @param g array of samples for sequence g[t]
   * @return array of coefficients for the inverse wavelet a.
   */
  public float[] estimateInverseAtimes(
      int na, int ka,
      Sampling stf, Sampling stg,
      float[] u, float[] f, float[] g)
  {
    Check.argument(-na<ka,"-na<ka");
    Check.argument(ka<=0,"ka<=0");
    int nt = f.length;
    double dt = stf.getDelta();

    //Differences between warped g and f
    float[][] d = computeDifferencestimes(na,ka,u,stf,stg,f,g);

    // The matrix C and right-hand-side vector b, for Ca = b.
    // For zero lag, we have a0 = a[-ka] = 1, so that
    // only na-1 coefficients of a are unknown;
    // the unknown coefficients are those corresponding to non-zero lags.
    int ma = na-1;
    DMatrix c = new DMatrix(ma,ma);
    DMatrix b = new DMatrix(ma,1);
    for (int ia=0,ic=0; ia<na; ++ia) {
      if (ia==-ka) continue; // skip lag zero, because a0 = 1
      for (int ja=0,jc=0; ja<na; ++ja) {
        if (ja==-ka) continue; // skip lag zero, because a0 = 1
        double cij = dot(d[ia],d[ja]);
        c.set(ic,jc,cij);
        ++jc;
      }
      c.set(ic,ic,c.get(ic,ic)*_sfac);
      double bi = -dot(d[ia],d[-ka]);
      b.set(ic,0,bi);
      ++ic;
    }
    //System.out.println("c=\n"+c);
    //System.out.println("b=\n"+b);

    // Solve for inverse filter a using Cholesky decomposition of C.
    DMatrixChd chd = new DMatrixChd(c);
    DMatrix a = chd.solve(b);
    float[] aa = new float[na];
    for (int ia=0,ic=0; ia<na; ++ia) {
      if (ia==-ka) {
        aa[ia] = 1.0f; // lag 0, so a0 = 1
      } else {
        aa[ia] = (float)a.get(ic,0);
        ++ic;
      }
    }
    return aa;
  }

  /**
   * Returns inverse wavelet a estimated by warping one sequence to 
   * another.
   * The sequences are related by warping such that f[t] ~ g[u[t]].
   * @param na number of samples in the inverse wavelet a.
   * @param ka the sample index for a[0].
   * @param u array of samples for warping u[t].
   * @param f array of samples for sequence f[t].
   * @param g array of samples for sequence g[t]
   * @return array of coefficients for the inverse wavelet a.
   */
   /*
  public float[] estimateInverseAshifts(
      int na, int ka,
      Sampling stf, Sampling stg,
      float[] u, float[] f, float[] g)
  {
    Check.argument(-na<ka,"-na<ka");
    Check.argument(ka<=0,"ka<=0");
    int nt = f.length;
    double dt = stf.getDelta();

    //Differences between warped g and f
    float[][] d = computeDifferencesshifts(na,ka,u,stf,stg,f,g);

    // The matrix C and right-hand-side vector b, for Ca = b.
    // For zero lag, we have a0 = a[-ka] = 1, so that
    // only na-1 coefficients of a are unknown;
    // the unknown coefficients are those corresponding to non-zero lags.
    int ma = na-1;
    DMatrix c = new DMatrix(ma,ma);
    DMatrix b = new DMatrix(ma,1);
    for (int ia=0,ic=0; ia<na; ++ia) {
      if (ia==-ka) continue; // skip lag zero, because a0 = 1
      for (int ja=0,jc=0; ja<na; ++ja) {
        if (ja==-ka) continue; // skip lag zero, because a0 = 1
        double cij = dot(d[ia],d[ja]);
        c.set(ic,jc,cij);
        ++jc;
      }
      c.set(ic,ic,c.get(ic,ic)*_sfac);
      double bi = -dot(d[ia],d[-ka]);
      b.set(ic,0,bi);
      ++ic;
    }
    //System.out.println("c=\n"+c);
    //System.out.println("b=\n"+b);

    // Solve for inverse filter a using Cholesky decomposition of C.
    DMatrixChd chd = new DMatrixChd(c);
    DMatrix a = chd.solve(b);
    float[] aa = new float[na];
    for (int ia=0,ic=0; ia<na; ++ia) {
      if (ia==-ka) {
        aa[ia] = 1.0f; // lag 0, so a0 = 1
      } else {
        aa[ia] = (float)a.get(ic,0);
        ++ic;
      }
    }
    return aa;
  }
  */


/**
   * Returns inverse wavelet a estimated via PEF of sequence.
   * @param na number of samples in the inverse wavelet a.
   * @param ka the sample index for a[0].
   * @param f array of samples for sequence f(t).
   * @return array of coefficients for the inverse wavelet a.
   */
  public float[] getInverseAPef(int na, int ka, float[] f) {
    int nt = f.length;

    // Sequence for different time shifts
    float[][] d = new float[na][nt];
    for (int ia=0; ia<na; ++ia) {
      d[ia] = delay(ka+ia,f);
    }

    // The matrix C and right-hand-side vector b, for Ca = b. For zero lag, we
    // have a0 = a[-ka] = 1, so that only na-1 coefficients of a are unknown;
    // the unknown coefficients are those corresponding to non-zero lags.
    int ma = na-1;
    DMatrix c = new DMatrix(ma,ma);
    DMatrix b = new DMatrix(ma,1);
    for (int ia=0,ic=0; ia<na; ++ia) {
      if (ia==-ka) continue; // skip lag zero, because a0 = 1
      for (int ja=0,jc=0; ja<na; ++ja) {
        if (ja==-ka) continue; // skip lag zero, because a0 = 1
        double cij = dot(d[ia],d[ja]);
        c.set(ic,jc,cij);
        ++jc;
      }
      c.set(ic,ic,c.get(ic,ic)*_sfac);
      double bi = -dot(d[ia],d[-ka]);
      b.set(ic,0,bi);
      ++ic;
    }
    //System.out.println("c=\n"+c);
    //System.out.println("b=\n"+b);

    // Solve for inverse filter a using Cholesky decomposition of C.
    DMatrixChd chd = new DMatrixChd(c);
    DMatrix a = chd.solve(b);
    float[] aa = new float[na];
    for (int ia=0,ic=0; ia<na; ++ia) {
      if (ia==-ka) {
        aa[ia] = 1.0f; // lag 0, so a0 = 1
      } else {
        aa[ia] = (float)a.get(ic,0);
        ++ic;
      }
    }
    return aa;
  }


  /**
   * Returns the array of differences D = B(SLG-F).
   */
  private float[][] computeDifferencestimes(
    int na, int ka, float[] u, Sampling stf, Sampling stg,
    float[] f, float[] g)
  {
    g = applyL(u,g);
    int nt = u.length;
    float[][] d = new float[na][];
    for (int ia=0,lag=ka; ia<na; ++ia,++lag) {
      float[] df = delay(lag,f);
      float[] dg = delay(lag,g);
      float[] sdg = applyStimes(stf,u,dg);
      float[] di = sub(sdg,df);
      d[ia] = applyB(di);
      if (ia==10) SimplePlot.asPoints(d[0]);
    }
    return d;
  }

  /**
   * Returns the array of differences D = B(SLG-F).
   */
  private float[][] computeDifferencesshifts(
    int na, int ka, float[] u, Sampling stf, Sampling stg,
    float[] f, float[] g)
  {
    /*
    g = applyL(u,g);
    int nt = u.length;
    float[][] d = new float[na][];
    for (int ia=0,lag=ka; ia<na; ++ia,++lag) {
      float[] df = delay(lag,f);
      float[] dg = delay(lag,g);
      float[] sdg = applySshifts(stg,u,dg);
      float[] di = sub(sdg,df);
      d[ia] = applyB(di);
      if (ia==10) SimplePlot.asPoints(d[0]);
    }
    */
    //return d;
    return null;
  }


  /**
   * Estimates the wavelet h from the inverse wavelet a.
   * @param na number of samples in the inverse wavelet a.
   * @param ka the sample index for a[0].
   * @param a array of coefficients for the inverse wavelet a.
   * @param nh number of samples in the wavelet h.
   * @param kh the sample index for h[0].
   */
  public float[] getWaveletH(int na, int ka, float[] a, int nh, int kh) {
    float[] one = {1.0f};
    float[] ca1 = new float[nh];
    float[] caa = new float[nh];
    xcor(na,ka,a,1,0,one,nh,kh,ca1);
    xcor(na,ka,a,na,ka,a,nh, 0,caa);
    caa[0] *= _sfac;
    SymmetricToeplitzFMatrix stm = new SymmetricToeplitzFMatrix(caa);
    return stm.solve(ca1);
  }


  /** 
   * Convolves the specified inverse wavelet A with the
   * specified trace.
   * @param f input signal.
   * @param na number of inverse wavelet coefficients.
   * @param ka starting sample of inverse wavelet coefficients.
   * @param a inverse wavelet coefficients.
   */
  public static float[] applyA(
    int na, int ka, float[] a, float[] f)
  {
    int nt = f.length;
    float[] g = new float[nt];
    applyFilter(na,ka,a,f,g);
    return g;
  }

  /** 
   * Convolves the specified wavelet H with the
   * specified trace.
   * @param f input signal.
   * @param nh number of wavelet coefficients.
   * @param kh starting sample of wavelet coefficients.
   * @param h wavelet coefficients.
   */
  public static float[] applyH(
    int nh, int kh, float[] h, float[] f)
  {
    int nt = f.length;
    float[] g = new float[nt];
    applyFilter(nh,kh,h,f,g);
    return g;
  }
  
  /**
   * Applies the bandpass filter B, if any was specified.
   * If no bandpass filter has been specified, then this method
   * simply returns
   * a copy of the specified input sequence.
   * @param f array with input sequence f(t).
   * @return array with filtered output sequence.
   */
  public float[] applyB(float[] f) {
    float[] g = new float[f.length];
    if (_bpf!=null) {
      _bpf.apply(f,g);
    } else {
      copy(f,g);
    }
    return g;
  }

  /**
   * Applies the low-pass anti-alias filter L.
   * If the specified warping includes squeezing, then this method attenuates
   * high frequencies that could be aliased during warping.
   * @param u array of warping times u(t).
   * @param f array with input sequence f(t).
   * @return array with filtered output sequence.
   */
  public float[] applyL(float[] u, float[] f) {
    return aaf(RMAX,u,f);
  }


  /**
   * Applies the warping operator S.
   * Does not apply an anti-alias low-pass filter.
   * @param stf sampling of f.
   * @param u array of warping times u(t).
   * @param f array with input sequence f(t).
   * @return array with warped output sequence.
   */
  public float[] applyStimes(Sampling stf, float[] u, float[] f) {
    return _warp.applyByTimes(u,f);
  }

  /**
   * Applies the warping operator S.
   * Does not apply an anti-alias low-pass filter.
   * @param stf sampling of f.
   * @param u array of warping times u(t).
   * @param f array with input sequence f(t).
   * @return array with warped output sequence.
   */
  public float[][] applyStimes(Sampling stf, Sampling sx, float[][] u, float[][] f) {
    return _warp.applyByTimes(sx,u,f);
  }

  /**
   * Applies the warping operator S.
   * Does not apply an anti-alias low-pass filter.
   * @param stf sampling of f.
   * @param u array of warping shifts.
   * @param f array with input sequence f(t).
   * @return array with warped output sequence.
   */
  public float[] applySshifts(Sampling stf, Sampling sht, float[] u, float[] f) {
    //return _warp.applyByShifts(sft,sht,u,f);
    return null;
  }

  /**
   * Applies the warping operator S.
   * Does not apply an anti-alias low-pass filter.
   * @param stf sampling of f.
   * @param u array of warping shifts.
   * @param f array with input sequence f(t).
   * @return array with warped output sequence.
   */
  public float[][] applySshifts(Sampling stf, Sampling sx, float[][] u, float[][] f) {
    //return _warp.applyByTimes(stf,sx,u,f);
    return null;
  }
  
  /**
   * Applies the composite linear operator HSLA.
   * The sequence of operations is (1) convolution with the inverse wavelet a,
   * (2) anti-alias filtering (if squeezing), (3) warping, and (4) convolution
   * with the wavelet h.
   * @param na number of samples in the inverse wavelet a.
   * @param ka the sample index for a[0].
   * @param a array of coefficients for the inverse wavelet a.
   * @param nh number of samples in the wavelet h.
   * @param kh the sample index for h[0].
   * @param h array of coefficients for the wavelet h.
   * @param u array[nt] of warping shifts.
   * @param f array[nt] with input sequence.
   * @return array[nt] with output sequence.
   */
  public float[] applyHSLAShifts(
    int na, int ka, float[] a,
    int nh, int kh, float[] h,
    float[] u, Sampling stf, float[] f) 
  {
    /*int nt = f.length;
    float[] af = applyA(na,ka,a,f);
    float[] laf = applyL(u,af);
    float[] saf = applySshifts(stf,u,laf);
    float[] hsaf = applyH(nh,kh,h,saf);
    return hsaf;
    */
    return null;
  }

  /**
   * Applies the composite linear operator HSLA.
   * The sequence of operations is (1) convolution with the inverse wavelet a,
   * (2) anti-alias filtering (if squeezing), (3) warping, and (4) convolution
   * with the wavelet h.
   * @param na number of samples in the inverse wavelet a.
   * @param ka the sample index for a[0].
   * @param a array of coefficients for the inverse wavelet a.
   * @param nh number of samples in the wavelet h.
   * @param kh the sample index for h[0].
   * @param h array of coefficients for the wavelet h.
   * @param u array[nt] of warping times u(t).
   * @param f array[nt] with input sequence.
   * @return array[nt] with output sequence.
   */
  public float[] applyHSLAStimes(
    int na, int ka, float[] a,
    int nh, int kh, float[] h,
    float[] u, Sampling stf, float[] f) 
  {
    int nt = f.length;
    float[] af = applyA(na,ka,a,f);
    float[] laf = applyL(u,af);
    float[] saf = applyStimes(stf,u,laf);
    float[] hsaf = applyH(nh,kh,h,saf);
    return hsaf;
  }

  /**
   * Applies the composite linear operator BSLA.
   * The sequence of operations is (1) convolution with the inverse wavelet a,
   * (2) anti-alias filtering (if squeezing), (3) warping, and (4) application
   * of the bandpass filter b.
   * @param na number of samples in the inverse wavelet a.
   * @param ka the sample index for a[0].
   * @param a array of coefficients for the inverse wavelet a.
   * @param u array[nt] of warping shifts.
   * @param f array[nt] with input sequence.
   * @return array[nt] with output sequence.
   */
  public float[] applyBSLAshifts(
    int na, int ka, float[] a, 
    float[] u, Sampling stf, float[] f) {
    /*int nt = f.length;
    float[] af = applyA(na,ka,a,f);
    float[] laf = applyL(u,af);
    float[] saf = applySshifts(stf,u,laf);
    float[] bsaf = applyB(saf);
    return bsaf;
    */
    return null;
  }

  /**
   * Applies the composite linear operator BSLA.
   * The sequence of operations is (1) convolution with the inverse wavelet a,
   * (2) anti-alias filtering (if squeezing), (3) warping, and (4) application
   * of the bandpass filter b.
   * @param na number of samples in the inverse wavelet a.
   * @param ka the sample index for a[0].
   * @param a array of coefficients for the inverse wavelet a.
   * @param u array[nt] of warping times u(t).
   * @param f array[nt] with input sequence.
   * @return array[nt] with output sequence.
   */
  public float[] applyBSLAtimes(
    int na, int ka, float[] a, 
    float[] u, Sampling stf, float[] f) {
    int nt = f.length;
    float[] af = applyA(na,ka,a,f);
    float[] laf = applyL(u,af);
    float[] saf = applyStimes(stf,u,laf);
    float[] bsaf = applyB(saf);
    return bsaf;
  }

  /**
   * Returns the largest squeezing r(t) = u'(t) not greater than rmax.
   * If less than or equal to one, then no squeezing is implied by u(t).
   */
  private static float squeezing(float rmax, float[] u) {
    int nt = u.length;
    float r = u[1]-u[0];
    for (int it=1; it<nt; ++it) {
      float du = u[it]-u[it-1];
      if (du>r)
        r = du;
    }
    return min(r,rmax);
  }

  /**
   * If necessary, applies an anti-alias filter to the sequence x(t).
   * An anti-alias filter is necessary if the warping includes squeezing.
   */
  private static float[] aaf(float rmax, float[] u, float[] x) {
    int nt = u.length;
    float r = squeezing(RMAX,u);
    if (r>1.0) {
      float[] y = new float[nt];
      BandPassFilter aaf = new BandPassFilter(0.0,0.5/r,0.10/r,0.01);
      aaf.apply(x,y);
      return y;
    } else {
      return copy(x);
    }
  }



  /**
* Returns differences between NMO-corrected gathers and stacks.
* @param na number of samples in the inverse wavelet a.
* @param ka the sample index for a[0].
* @param st time sampling.
* @param sx offset sampling.
* @param vnmo array[nt] of NMO velocities.
* @param f array[nx][nt] with input CMP gather.
* @return array[na][nx][nt] of difference gathers.
*/
  /*public float[][][] getDifferenceGathers(
    int na, int ka,
    Sampling stf, Sampling stg, Sampling sx,
    float[][] shifts, float[][] f, float[][] g)
  {
    float[][][] d = computeDifferences(na,ka,_bpf,stf,stg,sx,shifts,f,g);
    for (int ia=0,lag=ka; ia<na; ++ia,++lag)
      d[ia] = delay(-lag,d[ia]);
    //for (int ia=1; ia<na; ++ia)
    // d[ia] = sub(d[ia],d[0]);
    return d;
  }
  */

  /**
* Returns differences between NMO-corrected gathers and stacks.
* @param na number of samples in the inverse wavelet a.
* @param ka the sample index for a[0].
* @param st time sampling.
* @param sx offset sampling.
* @param vnmo array[nt] of NMO velocities.
* @param f array[nx][nt] with input CMP gather.
* @return array[na][nx][nt] of difference gathers.
*/
/*
  public float[][] getDifferenceGathers(
    int na, int ka,
    Sampling stf, Sampling stg,
    float[] shifts, float[] f, float[] g)
  {
    float[][] d = computeDifferences(na,ka,_bpf,stf,stg,shifts,f,g);
    for (int ia=0,lag=ka; ia<na; ++ia,++lag)
      d[ia] = delay(-lag,d[ia]);
    //for (int ia=1; ia<na; ++ia)
    // d[ia] = sub(d[ia],d[0]);
    return d;
  }
  */

  /**
* Returns uniformly sampled warped sequence h(x1) = g(x1+u(x1)).
* @param sg sampling of the sequence g to be warped.(PS Image)
* @param g array for the sequence g to be warped.
* @param u array of shifts.
* @return array for the warped sequence h.
*/
  public float[] applyShifts(Sampling sg, Sampling su, float[] g, float[] u) {
    Sampling s1 = su; 
    int ng = sg.getCount();
    int n1 = s1.getCount();
    float[] h = new float[n1];
    for (int i1=0; i1<n1; ++i1) {
      double x1 = s1.getValue(i1)+u[i1]*s1.getDelta();
      h[i1] = _si.interpolate(sg,g,x1);
      System.out.println("u = "+u[i1]);
    }
    return h;
  }

  /**
* Returns uniformly sampled warped image h(x1,x2) = g(x1+u(x1,x2),x2).
* @param sg sampling of the sequence g to be warped.
* @param g array for the sequence g to be warped.
* @param u array of shifts.
* @return array for the warped sequence h.
*/
  public float[][] applyShifts(Sampling sg, Sampling su, float[][] g, float[][] u) {
    int n2 = g.length;
    float[][] h = new float[n2][];
    for (int i2=0; i2<n2; ++i2)
      h[i2] = applyShifts(sg,su,g[i2],u[i2]);
    return h;
  }

  /**
* Returns uniformly sampled warped image h(x1,x2,x3) = g(x1+u(x1,x2,x3),x2,x3).
* @param sg sampling of the sequence g to be warped.
* @param g array for the sequence g to be warped.
* @param u array of shifts.
* @return array for the warped sequence h.
*/
  public float[][][] applyShifts(Sampling sg, Sampling su,
      float[][][] g, float[][][] u) {
    int n3 = g.length;
    int n2 = g[0].length;
    float[][][] h = new float[n3][n2][];

    for (int i3=0; i3<n3; ++i3)
      for (int i2=0; i2<n2; ++i2)
        h[i3][i2] = applyShifts(sg,su,g[i3][i2],u[i3][i2]);
    return h;
  }

  public static float[] getAmplitudes(
    Sampling st, float smax, float[] f, float[] t)
  {
    int nt = st.getCount();
    float dt = (float)st.getDelta();
    float ft = (float)st.getFirst();
    float odt = 1.0f/dt;
    float dtmin = dt/smax;
    System.out.println("dtmin = "+dtmin);
    float[] a = new float[nt];


    // Time of first non-zero input sample.
    int nz = countLeadingZeros(f);
    float tnz = ft+nz*dt;

    // Number of leading zeros in output. A leading output sample is zero
    // if either (1) the corresponding input samples and all prior input
    // samples are zero, or (2) NMO stretch would exceed the maximum.
    nz = 0;
    if (t[0]<tnz || t[1]-t[0]<dtmin)
      ++nz;
    for (int it=1; it<nt; ++it) {
      if (t[it]<tnz || t[it]-t[it-1]<dtmin)
        ++nz;
    }

    // Compute only the non-zero amplitudes. These amplitudes are simply the
    // inverse of NMO stretch.
    if (nz==0) {
      a[0] = (t[1]-t[0])*odt;
      ++nz;
    }
    for (int it=nz; it<nt; ++it)
      a[it] = (t[it]-t[it-1])*odt;
    return a;
  }

 public float[][] applyHSAshifts(
    int na, int ka, float[] a,
    int nh, int kh, float[] h,
    Sampling stf, Sampling stg, Sampling sx,
    float[][] shifts, float[][] f, float[][] g)
  {
    int nt = f[0].length;
    int nx = f.length;
    float[][] ga = applyFilter(na,ka,a,g);
    float[][] sga = applySshifts(stg,sx,g,shifts);
    return applyFilter(nh,kh,h,sga);
  }

 public float[][] applyHSAtimes(
    int na, int ka, float[] a,
    int nh, int kh, float[] h,
    Sampling stf, Sampling stg, Sampling sx,
    float[][] shifts, float[][] f, float[][] g)
  {
    int nt = f[0].length;
    int nx = f.length;
    float[][] ga = applyFilter(na,ka,a,g);
    float[][] sga = applyStimes(stg,stg,g,shifts);
    return applyFilter(nh,kh,h,sga);
  }

  public float[][] applyBSAshifts(
    int na, int ka, float[] a,
    Sampling stf, Sampling stg, Sampling sx,
    float[][] shifts, float[][] f, float[][] g)
  {
    int nx = sx.getCount();
    float[][] warp = applySshifts(stg,sx,g,shifts);
    float[][] d = sub(warp,f);
    float[][] da = applyFilter(na,ka,a,d);
    float[][] bda = da;
    if (_bpf!=null) {
      for (int ix=0; ix<nx; ++ix)
        _bpf.apply(da[ix],bda[ix]);
    }
    return bda;
  }

  public float[][] applyBSAtimes(
    int na, int ka, float[] a,
    Sampling stf, Sampling stg, Sampling sx,
    float[][] shifts, float[][] f, float[][] g)
  {
    int nx = sx.getCount();
    float[][] warp = applyStimes(stg,sx,g,shifts);
    float[][] d = sub(warp,f);
    float[][] da = applyFilter(na,ka,a,d);
    float[][] bda = da;
    if (_bpf!=null) {
      for (int ix=0; ix<nx; ++ix)
        _bpf.apply(da[ix],bda[ix]);
    }
    return bda;
  }

  /**
* Computes the rms statistic for a specified vertical range in
* the gather.
* @param st time sampling of the gather
* @param sx space sampling of the gather
* @param t1 time to begin rms computation (inclusive)
* @param t2 time to end rms computation (exclusive)
*/
  public float rms(Sampling st, Sampling sx,
      float t1, float t2, float[][] f) {
    int nt = st.getCount();
    int nx = sx.getCount();
    int it1 = st.indexOfNearest((double)(t1));
    int it2 = st.indexOfNearest((double)(t2));
    float sum = 0.0f;
    float ftx = 0.0f;
    int n = nx*(it2-it1+1);
    for (int ix=0; ix<nx; ++ix)
      for (int it=it1; it<=it2; ++it) {
        ftx = f[ix][it];
        sum += ftx*ftx;
      }
    float ms = sum/n;//ms is mean square
    return sqrt(ms);
  }

  /**
* rms of the entire gather
*/
  private float rms(float[][] f) {
    int nt = f[0].length;
    int nx = f.length;
    return (float)(sqrt(dot(f,f)/nx/nt));
  }

  /**
* Computes the mean for a specified vertical range in
* the gather.
* @param st time sampling of the gather
* @param sx space sampling of the gather
* @param t1 time to begin rms computation (inclusive)
* @param t2 time to end rms computation (exclusive)
*/
  public float mean(Sampling st, Sampling sx,
      float t1, float t2, float[][] f) {
    int nt = st.getCount();
    int nx = sx.getCount();
    int it1 = st.indexOfNearest((double)(t1));
    int it2 = st.indexOfNearest((double)(t2));
    float sum = 0.0f;
    float ftx = 0.0f;
    int n = nx*(it2-it1+1);
    for (int ix=0; ix<nx; ++ix)
      for (int it=it1; it<=it2; ++it) {
        sum += abs(f[ix][it]);
      }
    return sum/n;
  }

  public static void plotAmplitudeSpectrum(Sampling st, float[] p,
    boolean db,String title) {
    // Time sampling.
    int nt = st.getCount();
    double dt = st.getDelta();
    double ft = st.getFirst();

    // Frequency sampling.
    int nfft = FftReal.nfftSmall(2*nt);
    int nf = nfft/2+1;
    double df = 1.0/(nfft*dt);
    double ff = 0.0;
    Sampling fs = new Sampling(nf,df,ff);
    float[] amp = computeAmplitudeSpectrum(st, fs, nfft, p, db);
    plotSpectrum(fs,amp,title);
  }

  // Computes the amplitude spectra for the specified signal.
  public static float[] computeAmplitudeSpectrum(Sampling st,
    Sampling fs, int nfft, float[] p, boolean db)
  {
    int nt = st.getCount();
    double dt = st.getDelta();
    double ft = st.getFirst();
    int nf = fs.getCount();
    double df = fs.getDelta();
    double ff = fs.getFirst();
    // Real-to-complex fast Fourier transform.
    FftReal fft = new FftReal(nfft);
    float[] cf = new float[2*nf];
    copy(nt,p,cf);
    fft.realToComplex(-1,cf,cf);

    // Adjust phase for possibly non-zero time of first sample.
    float[] wft = rampfloat(0.0f,-2.0f*FLT_PI*(float)(df*ft),nf);
    cf = cmul(cf,cmplx(cos(wft),sin(wft)));

    // Amplitude spectrum, normalized.
    float[] af = cabs(cf);
    float amax = max(max(af),FLT_EPSILON);
    af = mul(1.0f/amax,af);
    if (db) {
      af = log10(af);
      af = mul(20.0f,af);
    }
    return af;
  }

  public float[] getDifferencePlots(int ia, boolean bdf, boolean bdg,
    boolean bsdg, boolean bd, boolean bbd) 
  {
    if (bdf) return _df[ia];
    else if (bdg) return _dg[ia];
    else if (bsdg) return _sdg[ia];
    else if (bd) return _d[ia];
    else if (bbd) return _bd[ia];
    else return null;
  }

  public void plotDifferenceSpectrums(int ia, boolean bdg,
    boolean bdgO, boolean bsdgO, boolean bsdg)
  {
    String title = "Amplitude dg lag = "+ia;
    if (bdg) plotAmplitudeSpectrum(_stg,_dg[ia],false,title);
    title = "Amplitude dgO lag = "+ia;
    if (bdgO) plotAmplitudeSpectrum(_stgO,_dgO[ia],false,title);
    title = "Amplitude sdgO lag = "+ia;
    if (bsdgO) plotAmplitudeSpectrum(_stgO,_sdgO[ia],false,title);
    title = "Amplitude sdg lag = "+ia;
    if (bsdg) plotAmplitudeSpectrum(_stg,_sdg[ia],false,title);
  }


  ///////////////////////////////////////////////////////////////
  //private
  private SincInterp _si;
  private static final float RMAX = 10.0f;//Limits anti-alias filter
  private Warp _warp;
  private double _sfac = 1.0;
  private int _itmin, _itmax;
  private BandPassFilter _bpf;
  private float[][] _df,_bdf,_dg,_dgO,_sdgO,_bsdg,_sdg,_d,_bd;
  private Sampling _stf,_stg,_stgO;

  


  /**
   * Delays the CMP gather f by specified lag (which may be negative).
   */
  private static float[] delay(int lag, float[] f) {
    int nt = f.length;
    int itlo = max(0,lag); // 0 <= it-lag
    int ithi = min(nt,nt+lag); // it-lag < nt
    float[] g = new float[nt];
    for (int it=0; it<itlo; ++it)
      g[it] = 0.0f;
    for (int it=itlo; it<ithi; ++it)
      g[it] = f[it-lag];
    for (int it=ithi; it<nt; ++it)
      g[it] = 0.0f;
    return g;
  }

  /**
   * Delays the CMP gather f by specified lag (which may be negative).
   */
  private static float[][] delay(int lag, float[][] f) {
    int nt = f[0].length;
    int nx = f.length;
    int itlo = max(0,lag); // 0 <= it-lag
    int ithi = min(nt,nt+lag); // it-lag < nt
    float[][] g = new float[nx][nt];
    for (int ix=0; ix<nx; ++ix) {
      for (int it=0; it<itlo; ++it)
        g[ix][it] = 0.0f;
      for (int it=itlo; it<ithi; ++it)
        g[ix][it] = f[ix][it-lag];
      for (int it=ithi; it<nt; ++it)
        g[ix][it] = 0.0f;
    }
    return g;
  }

  private double dot(float[] x, float[] y) {
    int nt = x.length;
    int itlo = (_itmin<_itmax)?_itmin:0;
    int ithi = (_itmin<_itmax)?_itmax:nt-1;
    double sum = 0.0;
    for (int it=itlo; it<=ithi; ++it) 
      sum += x[it]*y[it];
    return sum;
  }

  
  private double dot(float[][] f, float[][] g) {
    int nt = f[0].length;
    int nx = f.length;
    double sum = 0.0;
    for (int ix=0; ix<nx; ++ix)
      for (int it=_itmin; it<=_itmax; ++it)
        sum += f[ix][it]*g[ix][it];
    return sum;
  }

  public static float[][] applyFilter(
    int nh, int kh, float[] h, float[][] f)
  {
    int nt = f[0].length;
    int nx = f.length;
    float[][] g = new float[nx][nt];
    applyFilter(nh,kh,h,f,g);
    return g;
  }

  public static float[] applyFilter(
    int nh, int kh, float[] h, float[] f)
  {
    int nt = f.length;
    float[] g = new float[nt];
    applyFilter(nh,kh,h,f,g);
    return g;
  }


  private static void applyFilter(
    int nh, int kh, float[] h, float[] f, float[] g)
  {
    int nt = f.length;
    conv(nh,kh,h,nt,0,f,nt,0,g);
    preserveLeadingZeros(f,g);
  }

  private static void applyFilter(
    int nh, int kh, float[] h, float[][] f, float[][] g)
  {
    int nt = f[0].length;
    int nx = f.length;
    for (int ix=0; ix<nx; ++ix)
      conv(nh,kh,h,nt,0,f[ix],nt,0,g[ix]);
    preserveLeadingZeros(f,g);
  }

  private static void plotSpectrum(Sampling sf, float[] spec,
      String title) {
    SimplePlot sp = new SimplePlot(SimplePlot.Origin.LOWER_LEFT);
    sp.setVLabel("Frequency");
    sp.setSize(750,400);
    sp.addTitle(title);
    PointsView pv = sp.addPoints(sf,spec);
  }


  private static void preserveLeadingZeros(float[][] f, float[][] g) {
    int nx = f.length;
    for (int ix=0; ix<nx; ++ix)
      preserveLeadingZeros(f[ix],g[ix]);
  }

  private static void preserveLeadingZeros(float[] f, float[] g) {
    int nt = f.length;
    int nz = countLeadingZeros(f);
    for (int it=0; it<nz; ++it)
      g[it] = 0.0f;
  }

  private static int countLeadingZeros(float[] f) {
    int n = f.length;
    int nz = 0;
    for (int i=0; i<n && f[i]==0.0f; ++i)
      ++nz;
    return nz;
  }


  

}
